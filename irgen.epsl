$import conversion;

IRStructDef {
    Str:name,
    Bool:is_opaque,
    IRStructType?:struct
}

Str#[IRStructDef:struct_def].stringify {
    Str:name = [struct_def.name].quote_if_required;
    if (struct_def.is_opaque) {
        return "%{} = type opaque" % name;
    } else {
        Str:type_str = [[struct_def.struct].unwrap].stringify;
        return "%{} = type {}" % name % type_str;
    };
}

IRIntConstant {
    L:val
}

IRFloatConstant {
    Q:val
}

IRStructConstant {
    [IRConstant]:elements
}

IRArrayConstant {
    [IRConstant]:elements
}

IRGlobalPtrConstant {
    IRRegister:register
}

IRNullConstant {}

IRPoisonConstant {}

IRConstant {
    IRType:type,
    IRIntConstant?:int,
    IRFloatConstant?:float,
    IRStructConstant?:struct_,
    IRArrayConstant?:array,
    IRGlobalPtrConstant?:global_ptr,
    IRNullConstant?:null_,
    IRPoisonConstant?:poison
}

Str#bytes_to_hex[[Byte]:bytes] {
    Str:hex_nibbles = "0123456789ABCDEF";
    Str:result = Str*([bytes].len * 2);
    W:i = [result].len - 1;
    for (Byte:byte in bytes step -1) {
        result[i--] = hex_nibbles[byte % 16];
        result[i--] = hex_nibbles[byte ~/ 16];
    };
    return result;
}

Str#[IRConstant:const].stringify {
    given (const.int as IRIntConstant:int) {
        return [int.val].stringify;
    } given (const.float as IRFloatConstant:float) {
        Q:val = float.val;
        W:bits = (W)[const.type.float].unwrap.bits;
        if (bits == 16) {
            val = (Q16)val;
        } elif (bits == 32) {
            val = (Q32)val;
        } elif (bits == 64) {
            val = (Q64)val;
        } elif (bits == 128) {
            // val = (Q128)val;
            abort "128 float constants not yet supported";
        } else {
            abort "{} is an invalid number of bits for a float constant" % bits;
        };

        Str:result_start = "";
        [Byte]:bytes = [Byte] [];

        if (bits <= 64) {
            result_start = "0x";
            bytes = [val].pack;
        } elif (bits == 128) {
            // result_start = "0xL";
            // bytes = [(Q128)val].pack;
            abort "128 bit float constants are not yet supported";
        } else {
            abort "{} is an invalid number of bits for a float constant" % bits;
        };

        return [result_start] + [bytes_to_hex[bytes]];
    } given (const.struct_ as IRStructConstant:struct_) {
        Str:result = [""].clone;
        for (L:i enumerating struct_.elements) {
            if (i > 0) {
                [result].append[','];
            };
            [result].append[' '];
            IRConstant:element = struct_.elements[i];
            [result].extend[[element.type].stringify];
            [result].append[' '];
            [result].extend[[element].stringify];
        };
        return "{{} }" % result;
    } given (const.array as IRArrayConstant:array) {
        Str:result = [""].clone;
        for (L:i enumerating array.elements) {
            if (i > 0) {
                [result].append[','];
            };
            [result].append[' '];
            IRConstant:element = array.elements[i];
            [result].extend[[element.type].stringify];
            [result].append[' '];
            [result].extend[[element].stringify];
        };
        return "[{} ]" % result;
    } given (const.global_ptr as IRGlobalPtrConstant:global_ptr) {
        return [global_ptr.register].stringify;
    } given (const.null_ as IRNullConstant:null_) {
        return "null";
    } given (const.poison as IRPoisonConstant:poison) {
        return "poison";
    } else {
        abort "Invalid IR constant";
    };
}

IRRegister {
    Bool:is_global,
    Str:name,
    IRType:type
}

Str#[Str:str].quote_if_required {
    if ([str].requires_quotes) {
        return str_for_IR[str];
    } else {
        return str;
    };
}

Bool#[Str:str].requires_quotes {
    for (Byte:chr in str) {
        if (!((chr >= '0' && chr <= '0') || (chr >= 'a' && chr <= 'z')
            || (chr >= 'A' && chr <= 'Z') || chr == '_')) {
            return true;
        };
    };
    return false;
}

Str#[IRRegister:register].stringify {
    Str:name = [register.name].quote_if_required;
    if (register.is_global) {
        return ["@"] + [name];
    } else {
        return ["%"] + [name];
    };
}

IRBaseCallInstruction {
    IRRegister:register,
    [IRValue]:args,
    W:varg_count
}

Str#[IRBaseCallInstruction:call].stringify with ret [Str:ret] {
    Str:sig = ret;

    if (call.varg_count) {
        Str:arg_type_txt = [""].clone;
        for (IRValue:arg in call.args to [call.args].len - call.varg_count) {
            [arg_type_txt].extend[[[arg].type].stringify];
            [arg_type_txt].extend[", "];
        };
        sig = "{} ({}...)" % ret % arg_type_txt;
    };

    Str:arg_txt = [""].clone;
    for (IRValue:arg in call.args) {
        Str:frmt = "{} {}";
        if ([arg_txt].len) {
            frmt = ", {} {}";
        };
        [arg_txt].extend[frmt % [[arg].type].stringify % [arg].stringify];
    };

    return "call {} {}({})" % sig % [call.register].stringify % arg_txt;
}

Str#stringify binary [:IRBinaryInstruction:instr] name: [Str:name] type_str: [Str:type_str] {
    Str:flags_str = [""].clone;
    for (Str:flag in instr.flags) {
        [flags_str].append[' '];
        [flags_str].extend[flag];
    };
    return "{}{} {} {}, {}" % name % flags_str % type_str
        % [instr.v1].stringify % [instr.v2].stringify;
}

@extends IRValuedInstruction;
IRFloatNegationInstruction {
    IRValue:v
}

// binary in this case means "two operands"
@super;
@extends IRValuedInstruction;
IRBinaryInstruction {
    [Str]:flags,
    IRValue:v1,
    IRValue:v2
}

@extends IRBinaryInstruction;
IRAdditionInstruction {}

@extends IRBinaryInstruction;
IRFloatAdditionInstruction {}

@extends IRBinaryInstruction;
IRSubtractionInstruction {}

@extends IRBinaryInstruction;
IRFloatSubtractionInstruction {}

@extends IRBinaryInstruction;
IRMultiplicationInstruction {}

@extends IRBinaryInstruction;
IRFloatMultiplicationInstruction {}

@extends IRBinaryInstruction;
IRUnsignedDivisionInstruction {}

@extends IRBinaryInstruction;
IRSignedDivisionInstruction {}

@extends IRBinaryInstruction;
IRFloatDivisionInstruction {}

@extends IRBinaryInstruction;
IRUnsignedModuloInstruction {}

@extends IRBinaryInstruction;
IRSignedModuloInstruction {}

@extends IRBinaryInstruction;
IRFloatModuloInstruction {}

@extends IRBinaryInstruction;
IRLeftShiftInstruction {}

@extends IRBinaryInstruction;
IRUnsignedRightShiftInstruction {}

@extends IRBinaryInstruction;
IRSignedRightShiftInstruction {}

@extends IRBinaryInstruction;
IRANDInstruction {}

@extends IRBinaryInstruction;
IRORInstruction {}

@extends IRBinaryInstruction;
IRXORInstruction {}

@extends IRValuedInstruction;
IRExtractValueInstruction {
    IRValue:aggregate,
    [W]:indices
}

@extends IRValuedInstruction;
IRInsertValueInstruction {
    IRValue:aggregate,
    IRValue:elem,
    [W]:indices
}

@extends IRValuedInstruction;
IRAllocaInstruction {
    IRType:type
}

@extends IRValuedInstruction;
IRAllocaMultipleInstruction {
    IRType:type,
    IRValue:count
}

@extends IRValuedInstruction;
IRLoadInstruction {
    IRValue:ptr
}

@extends IRValuedInstruction;
IRGEPInstruction {
    IRType:base_type,
    IRValue:ptr,
    [IRValue]:indices
}

@extends IRValuedInstruction;
IRTruncateInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRUnsignedExtendInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRSignedExtendInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRFloatTruncateInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRFloatExtendInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRFloatToUnsignedInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRFloatToSignedInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRUnsignedToFloatInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRSignedToFloatInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRPtrToIntInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRIntToPtrInstruction {
    IRValue:v
}

@extends IRValuedInstruction;
IRIntCompareInstruction {
    Str:comp,
    IRValue:v1,
    IRValue:v2
}

@extends IRValuedInstruction;
IRFloatCompareInstruction {
    Str:comp,
    IRValue:v1,
    IRValue:v2
}

@extends IRValuedInstruction;
IRPHIInstruction {
    [IRValue]:vals,
    [W]:block_ids
}

@extends IRValuedInstruction;
IRSelectInstruction {
    IRValue:cond,
    IRValue:if_true,
    IRValue:if_false
}

@extends IRValuedInstruction;
IRCallInstruction {
    IRBaseCallInstruction:call
}

@extends IRInstruction;
@super;
IRValuedInstruction {
    IRRegister:register
}

@id stringify_valued;
Str#[:IRValuedInstruction:instruction].stringify {
    Str?:val = null;
    Str:type_str = [instruction.register.type].stringify;
    given (instruction as IRFloatNegationInstruction:float_negation) {
        val = "fneg {} {}" % type_str % [float_negation.v].stringify;
    } given (instruction as IRAdditionInstruction:addition) {
        val = stringify binary [addition] name: ["add"] type_str: [type_str];
    } given (instruction as IRFloatAdditionInstruction:float_addition) {
        val = stringify binary [float_addition] name: ["fadd"] type_str: [type_str];
    } given (instruction as IRSubtractionInstruction:subtraction) {
        val = stringify binary [subtraction] name: ["sub"] type_str: [type_str];
    } given (instruction as IRFloatSubtractionInstruction:float_subtraction) {
        val = stringify binary [float_subtraction] name: ["fsub"] type_str: [type_str];
    } given (instruction as IRMultiplicationInstruction:multiplication) {
        val = stringify binary [multiplication] name: ["mul"] type_str: [type_str];
    } given (instruction as IRFloatMultiplicationInstruction:float_multiplication) {
        val = stringify binary [float_multiplication] name: ["fmul"] type_str: [type_str];
    } given (instruction as IRUnsignedDivisionInstruction:unsigned_division) {
        val = stringify binary [unsigned_division] name: ["udiv"] type_str: [type_str];
    } given (instruction as IRSignedDivisionInstruction:signed_division) {
        val = stringify binary [signed_division] name: ["sdiv"] type_str: [type_str];
    } given (instruction as IRFloatDivisionInstruction:float_division) {
        val = stringify binary [float_division] name: ["fdiv"] type_str: [type_str];
    } given (instruction as IRUnsignedModuloInstruction:unsigned_modulo) {
        val = stringify binary [unsigned_modulo] name: ["urem"] type_str: [type_str];
    } given (instruction as IRSignedModuloInstruction:signed_modulo) {
        val = stringify binary [signed_modulo] name: ["srem"] type_str: [type_str];
    } given (instruction as IRFloatModuloInstruction:float_modulo) {
        val = stringify binary [float_modulo] name: ["frem"] type_str: [type_str];
    } given (instruction as IRLeftShiftInstruction:left_shift) {
        val = stringify binary [left_shift] name: ["shl"] type_str: [type_str];
    } given (instruction as IRUnsignedRightShiftInstruction:unsigned_right_shift) {
        val = stringify binary [unsigned_right_shift] name: ["lshr"] type_str: [type_str];
    } given (instruction as IRSignedRightShiftInstruction:signed_right_shift) {
        val = stringify binary [signed_right_shift] name: ["ashr"] type_str: [type_str];
    } given (instruction as IRANDInstruction:AND) {
        val = stringify binary [AND] name: ["and"] type_str: [type_str];
    } given (instruction as IRORInstruction:OR) {
        val = stringify binary [OR] name: ["or"] type_str: [type_str];
    } given (instruction as IRXORInstruction:XOR) {
        val = stringify binary [XOR] name: ["xor"] type_str: [type_str];
    } given (instruction as IRExtractValueInstruction:extract_value) {
        Str:txt = "extractvalue {} {}" % [[extract_value.aggregate].type].stringify % [extract_value.aggregate].stringify;
        for (W:index in extract_value.indices) {
            [txt].extend[", {}" % index];
        };
        val = txt;
    } given (instruction as IRInsertValueInstruction:insert_value) {
        Str:txt = "insertvalue {} {}, {} {}" % [[insert_value.aggregate].type].stringify % [insert_value.aggregate].stringify % [[insert_value.elem].type].stringify % [insert_value.elem].stringify;
        for (W:index in insert_value.indices) {
            [txt].extend[", {}" % index];
        };
        val = txt;
    } given (instruction as IRAllocaInstruction:alloca) {
        val = ["alloca "] + [[alloca.type].stringify];
    } given (instruction as IRAllocaMultipleInstruction:alloca_multiple) {
        IRValue:count = alloca_multiple.count;
        val = "alloca {}, {} {}" % [alloca_multiple.type].stringify % [[count].type].stringify % [count].stringify;
    } given (instruction as IRLoadInstruction:load) {
        val = "load {}, ptr {}" % type_str % [load.ptr].stringify;
    } given (instruction as IRGEPInstruction:GEP) {
        Str:txt = "getelementptr {}, ptr {}" % [GEP.base_type].stringify % [GEP.ptr].stringify;
        for (IRValue:index in GEP.indices) {
            [txt].extend[", {} {}" % [[index].type].stringify % [index].stringify];
        };
        val = txt;
    } given (instruction as IRTruncateInstruction:truncate) {
        IRValue:v = truncate.v;
        val = "trunc {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRUnsignedExtendInstruction:unsigned_extend) {
        IRValue:v = unsigned_extend.v;
        val = "zext {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRSignedExtendInstruction:signed_extend) {
        IRValue:v = signed_extend.v;
        val = "sext {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRFloatTruncateInstruction:float_truncate) {
        IRValue:v = float_truncate.v;
        val = "fptrunc {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRFloatExtendInstruction:float_extend) {
        IRValue:v = float_extend.v;
        val = "fpext {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRFloatToUnsignedInstruction:float_to_unsigned) {
        IRValue:v = float_to_unsigned.v;
        val = "fptoui {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRFloatToSignedInstruction:float_to_signed) {
        IRValue:v = float_to_signed.v;
        val = "fptosi {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRUnsignedToFloatInstruction:unsigned_to_float) {
        IRValue:v = unsigned_to_float.v;
        val = "uitofp {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRSignedToFloatInstruction:signed_to_float) {
        IRValue:v = signed_to_float.v;
        val = "sitofp {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRPtrToIntInstruction:ptr_to_int) {
        IRValue:v = ptr_to_int.v;
        val = "ptrtoint {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRIntToPtrInstruction:int_to_ptr) {
        IRValue:v = int_to_ptr.v;
        val = "inttoptr {} {} to {}" % [[v].type].stringify % [v].stringify % type_str;
    } given (instruction as IRIntCompareInstruction:int_compare) {
        Str:v1_type_str = [[int_compare.v1].type].stringify;
        Str:v2_type_str = [[int_compare.v2].type].stringify;
        if (![v1_type_str] equals [v2_type_str]) {
            abort "Both operands of a comparison instruction must have the same IR type (found types {} and {})" % v1_type_str % v2_type_str;
        };
        val = "icmp {} {} {}, {}" % int_compare.comp % v1_type_str % [int_compare.v1].stringify % [int_compare.v2].stringify;
    } given (instruction as IRFloatCompareInstruction:float_compare) {
        Str:v1_type_str = [[float_compare.v1].type].stringify;
        Str:v2_type_str = [[float_compare.v2].type].stringify;
        if (![v1_type_str] equals [v2_type_str]) {
            abort "Both operands of a comparison instruction must have the same IR type (found types {} and {})" % v1_type_str % v2_type_str;
        };
        val = "fcmp {} {} {}, {}" % float_compare.comp % v1_type_str % [float_compare.v1].stringify % [float_compare.v2].stringify;
    } given (instruction as IRPHIInstruction:PHI) {
        Str:txt = ["phi "] + [type_str];

        if ([PHI.vals].len != [PHI.block_ids].len) {
            abort "The PHI values and blocks must match in number one to one";
        };

        for (W:i enumerating PHI.vals) {
            if (i > 0) {
                [txt].extend[", "];
            };
            [txt].extend[" [ {}, %b{} ]" % [PHI.vals[i]].stringify % PHI.block_ids[i]];
        };

        val = txt;
    } given (instruction as IRSelectInstruction:select) {
        val = "select {} {}, {} {}, {} {}" % [[select.cond].type].stringify % [select.cond].stringify % [[select.if_true].type].stringify % [select.if_true].stringify % [[select.if_false].type].stringify % [select.if_false].stringify;
    } given (instruction as IRCallInstruction:call) {
        val = [call.call].stringify with ret [type_str];
    } else {
        abort "Invalid IRValuedInstruction {}" % instruction;
    };
    return "{} = {}" % [instruction.register].stringify % [val].unwrap;
}

@extends IRInstruction;
IRRetVoidInstruction {}

@extends IRInstruction;
IRRetInstruction {
    IRValue:returned
}

@extends IRInstruction;
IRConditionalBranchInstruction {
    IRValue:condition,
    W:branch_id_if_true,
    W:branch_id_if_false
}

@extends IRInstruction;
IRUnconditionalBranchInstruction {
    W:branch_id
}

@extends IRInstruction;
IRSwitchInstruction {
    IRValue:switch_on,
    W:branch_id_default,
    [IRConstant]:targets,
    [W]:branch_ids
}

@extends IRInstruction;
IRUnreachableInstruction {}

@extends IRInstruction;
IRStoreInstruction {
    IRValue:val,
    IRValue:ptr
}

@extends IRInstruction;
IRCallVoidInstruction {
    IRBaseCallInstruction:call
}

@super;
IRInstruction {}

@id stringify_instruction;
Str#[:IRInstruction:instruction].stringify {
    given (instruction as :IRValuedInstruction:valued) {
        return [valued].stringify;
    } given (instruction as IRRetVoidInstruction:ret_void) {
        return "ret void";
    } given (instruction as IRRetInstruction:ret) {
        return "ret {} {}" % [[ret.returned].type].stringify % [ret.returned].stringify;
    } given (instruction as IRConditionalBranchInstruction:conditional_branch) {
        return "br i1 {}, label %b{}, label %b{}" % [conditional_branch.condition].stringify % conditional_branch.branch_id_if_true % conditional_branch.branch_id_if_false;
    } given (instruction as IRUnconditionalBranchInstruction:unconditional_branch) {
        return "br label %b{}" % unconditional_branch.branch_id;
    } given (instruction as IRSwitchInstruction:switch_) {

        if ([switch_.targets].len != [switch_.branch_ids].len) {
            abort "The number of switch target values ({}) does not match the number of switch non-default branches ({})" % [switch_.targets].len % [switch_.branch_ids].len;
        };

        Str:table_body = [""].clone;

        for (W:i enumerating switch_.targets) {
            IRConstant:const = switch_.targets[i];
            if (table_body) {
                [table_body].append[' '];
            };
            [table_body].extend["{} {}, label %b{}" % [const.type].stringify % [const].stringify % switch_.branch_ids[i]];
        };

        return "switch {} {}, label %b{} [ {} ]" % [[switch_.switch_on].type].stringify % [switch_.switch_on].stringify % switch_.branch_id_default % table_body;
    } given (instruction as IRUnreachableInstruction:unreachable) {
        return "unreachable";
    } given (instruction as IRStoreInstruction:store) {
        return "store {} {}, ptr {}" % [[store.val].type].stringify % [store.val].stringify % [store.ptr].stringify;
    } given (instruction as IRCallVoidInstruction:void_call) {
        return [void_call.call].stringify with ret ["void"];
    } else {
        abort "Invalid IRInstruction";
    };
}

IRValue {
    IRRegister?:register,
    IRConstant?:constant
}

IRType#[IRValue:val].type {
    if (val.register) {
        return [val.register].unwrap.type;
    } elif (val.constant) {
        return [val.constant].unwrap.type;
    } else {
        abort "Invalid IRValue";
    };
}

Str#[IRValue:val].stringify {
    if (val.register) {
        return [[val.register].unwrap].stringify;
    } elif (val.constant) {
        return [[val.constant].unwrap].stringify;
    } else {
        abort "Invalid IRValue";
    };
}

IRBasicBlock {
    W:id,
    [:IRInstruction]:instructions,
    Bool:is_terminated
}

Str#[IRBasicBlock:basic_block].stringify {
    Str:result = "b{}:\n" % basic_block.id;
    for (:IRInstruction:instruction in basic_block.instructions) {
        [result].extend["  "];
        [result].extend[[instruction].stringify];
        [result].append['\n'];
    };
    return result;
}

IRFuncBody {
    [IRBasicBlock]:blocks,
    // for both IRRegister names and IRBasicBlock ids
    W:id_counter
}

Str#[IRFuncBody:func_body].stringify {
    Str:blocks_stringified = [""].clone;
    for (IRBasicBlock:block in func_body.blocks) {
        [blocks_stringified].extend[[block].stringify];
    };
    return " {\n{}}" % blocks_stringified;
}

@super;
IRBaseParameter {
    IRType:type,
    [Str]:attrs,
}

@extends IRBaseParameter;
IRArgument {
    Str?:name
}

@extends IRBaseParameter;
IRReturnType {}

IRFunc {
    IRReturnType:ret,
    Str:specifiers,
    Str:name,
    [IRArgument]:args,
    Bool:has_vargs,
    [Str]:fn_attrs,
    IRFuncBody?:body
}

Str#[IRFunc:func].stringify {
    Str:stringified_args = [""].clone;
    for (W:i enumerating func.args) {
        if (i > 0) {
            [stringified_args].extend[", "];
        };
        IRArgument:arg = func.args[i];
        [stringified_args].extend[[arg.type].stringify];
        for (Str:attr in arg.attrs) {
            [stringified_args].append[' '];
            [stringified_args].extend[attr];
        };
        given (arg.name as Str:name) {
            [stringified_args].extend[" %"];
            [stringified_args].extend[name];
        };
    };
    if (func.has_vargs) {
        [stringified_args].extend[", ..."];
    };
    Str:statement = "declare";
    if (func.body) {
        statement = "define";
    };
    statement = [statement] + [func.specifiers];
    Str:stringified_ret = [""].clone;
    for (Str:attr in func.ret.attrs) {
        [stringified_ret].extend[attr];
        [stringified_ret].append[' '];
    };
    [stringified_ret].extend[[func.ret.type].stringify];
    Str:result = "{} {} @{}({})" % statement % stringified_ret
        % [func.name].quote_if_required % stringified_args;
    for (Str:fn_attr in func.fn_attrs) {
        [result].append[' '];
        [result].extend[fn_attr];
    };
    if (func.body) {
        [result].extend[[[func.body].unwrap].stringify];
    };
    [result].extend["\n\n"];
    return result;
}

IRGlobal {
    IRRegister:register,
    Str?:linkage,
    Bool:named_addr,
    Bool:is_const,
    IRType:type,
    IRConstant?:basic_init,
    Str?:str_init
}

Str#[IRGlobal:global].stringify {
    Str:specifiers = [""].clone;
    if (global.linkage) {
        [specifiers].append[' '];
        [specifiers].extend[[global.linkage].unwrap];
    };
    if (!global.named_addr) {
        [specifiers].extend[" unnamed_addr"];
    };
    if (global.is_const) {
        [specifiers].extend[" constant"];
    } else {
        [specifiers].extend[" global"];
    };

    Str:init_val = "";
    if (global.basic_init) {
        init_val = [" "] + [[[global.basic_init].unwrap].stringify];
    } elif (global.str_init) {
        init_val = [" c"] + [str_for_IR[[global.str_init].unwrap]];
    };

    return "{} ={} {}{}" % [global.register].stringify % specifiers
        % [global.type].stringify % init_val;
}

Str#str_for_IR[Str:str] {
    Str:body = ["\""].clone;
    for (Byte:chr in str) {
        if (chr == '\\') {
            [body].extend["\\\\"];
        } elif (chr >= ' ' && chr <= '~' && chr != '"') {
            [body].append[chr];
        } else {
            Str:hex_nibbles = "0123456789ABCDEF";
            [body].append['\\'];
            [body].append[hex_nibbles[[chr] >> [4]]];
            [body].append[hex_nibbles[[chr] & [15]]];
        };
    };
    [body].append['"'];
    return body;
}

IRModule {
    Str:target_triple,
    Str:target_datalayout,
    Str:source_filename,
    [IRGlobal]:globals,
    [IRStructDef]:struct_defs,
    [IRFunc]:funcs
}

Str#[IRModule:module].stringify {
    Str:globals_stringified = [""].clone;
    for (IRGlobal:global in module.globals) {
        [globals_stringified].extend[[global].stringify];
        [globals_stringified].append['\n'];
    };

    Str:struct_defs_stringified = [""].clone;
    for (IRStructDef:struct_def in module.struct_defs) {
        [struct_defs_stringified].extend[[struct_def].stringify];
        [struct_defs_stringified].append['\n'];
    };

    Str:funcs_stringified = [""].clone;
    for (IRFunc:func in module.funcs) {
        [funcs_stringified].extend[[func].stringify];
        [funcs_stringified].extend["\n\n"];
    };

    return "target triple = \"{}\"
target datalayout = \"{}\"
source_filename = \"{}\"

{}
{}
{}" % module.target_triple % module.target_datalayout % module.source_filename
        % globals_stringified % struct_defs_stringified % funcs_stringified;
}

IRPtrType {}

IRIntType {
    W:bits
}

IRFloatType {
    W:bits // acceptable values are 16, 32, 64, and 128
}

IRVoidType {}

IRArrayType {
    W:elem_count,
    IRType:elem_type
}

IRStructType {
    [IRType]:members
}

Str#[IRStructType:struct_type].stringify {
    Str:inner = [""].clone;
    for (W:i enumerating struct_type.members) {
        if (i > 0) {
            [inner].extend[", "];
        };
        [inner].extend[[struct_type.members[i]].stringify];
    };
    return "{{}}" % inner;
}

IRIdentifiedStructType {
    Str:name
}

IRType {
    IRPtrType?:ptr,
    IRIntType?:int,
    IRFloatType?:float,
    IRVoidType?:void,
    IRArrayType?:array,
    IRStructType?:literal_struct,
    IRIdentifiedStructType?:identified_struct,
}

Str#[IRType:type].stringify {
    if (![type.ptr].is_null) {
        return "ptr";
    } elif (![type.int].is_null) {
        return "i{}" % [type.int].unwrap.bits;
    } elif (![type.float].is_null) {
        W:bits = [type.float].unwrap.bits;
        switch (bits)
        (16) {
            return "half";
        }
        (32) {
            return "float";
        }
        (64) {
            return "double";
        }
        (128) {
            return "fp128";
        }
        {
            abort "{} is not a valid number of bits for a float" % bits;
        };
    } elif (![type.void].is_null) {
        return "void";
    } elif (![type.array].is_null) {
        IRArrayType:arr = [type.array].unwrap;
        return "[{} x {}]" % arr.elem_count % [arr.elem_type].stringify;
    } elif (![type.literal_struct].is_null) {
        return [[type.literal_struct].unwrap].stringify;
    } elif (![type.identified_struct].is_null) {
        return ["%"] + [[[type.identified_struct].unwrap.name].quote_if_required];
    } else {
        abort "Invalid IR type";
    };
}
